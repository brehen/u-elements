/// <reference types="vitest" />
import { defineConfig } from 'vite'
import { customElementVsCodePlugin } from 'custom-element-vs-code-integration'
import customElementsManifest from 'vite-plugin-cem'
import path from 'path'
import fs from 'fs';

// Save entry file
fs.writeFileSync('src/index.ts', `
// THIS FILE IS AUTO-GENERATED BY BUILD STEP
import type * as VueJSX from '@vue/runtime-dom';
import type { JSX as QwikJSX } from '@builder.io/qwik/jsx-runtime';
import type { JSX as ReactJSX } from 'react';
import type { JSX as SolidJSX } from 'solid-js';
import type { SvelteHTMLElements } from 'svelte/elements';

${getEntries().join('\n')}`);

export default defineConfig({
  plugins: [
    customElementsManifest({
      files: ['./src/**/*.ts'],
      plugins: [
        // eslint-disable-next-line
        // @ts-ignore
        customElementVsCodePlugin({
          htmlFileName: 'vscode.json',
          cssFileName: null,
          outdir: 'dist'
        })
      ]
    })
  ],
  build: {
    sourcemap: true,
    lib: {
      entry: path.resolve('src/index.ts'),
      fileName: '[name]',
      formats: ['es', 'cjs']
    }
  },
  test: {
    environment: 'jsdom',
    // Store snapshots in .snapshots-folder
    resolveSnapshotPath: (testPath, ext) => `.snapshots${testPath}${ext}`
  }
})

function getEntries() {
  return fs.readdirSync('./src')
    .filter((name) => fs.existsSync(`src/${name}/${name}.ts`))
    .map((name) => {
      const tagName = name.replace(/^u-/, '')
      const HTMLName = tagName.slice(0, 1).toUpperCase() + tagName.slice(1)
      if (name === 'u-tabs' || name === 'u-datalist') return ''; // TODO TMP

      return `
export type Vue${HTMLName} = VueJSX.${HTMLName}HTMLAttributes;
export type Qwik${HTMLName} = QwikJSX.IntrinsicElements['${tagName}'];
export type React${HTMLName} = ReactJSX.IntrinsicElements['${tagName}'];
export type SolidJS${HTMLName} = SolidJSX.HTMLElementTags['${tagName}'];
export type Svelte${HTMLName} = SvelteHTMLElements['${tagName}'];

// Augmenting @vue/runtime-dom instead of vue firectly to avoid interfering with React JSX
declare module '@vue/runtime-dom' { export interface GlobalComponents { '${name}': Vue${HTMLName} } }
declare module '@builder.io/qwik/jsx-runtime' { export namespace JSX { export interface IntrinsicElements { '${name}': Qwik${HTMLName} } } }
declare global { namespace React.JSX { interface IntrinsicElements { '${name}': React${HTMLName} } } }
declare module 'solid-js' { namespace JSX { interface IntrinsicElements { '${name}': SolidJS${HTMLName} } } }
declare module 'svelte/elements' { interface SvelteHTMLElements { '${name}': Svelte${HTMLName} } }

export * from './${name}/${name}'
`
    });
}
